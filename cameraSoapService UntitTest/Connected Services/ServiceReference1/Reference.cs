//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace cameraSoapService_UntitTest.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Image", Namespace="http://schemas.datacontract.org/2004/07/CameraSoapService")]
    [System.SerializableAttribute()]
    public partial class Image : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DatetimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LinkField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Datetime {
            get {
                return this.DatetimeField;
            }
            set {
                if ((this.DatetimeField.Equals(value) != true)) {
                    this.DatetimeField = value;
                    this.RaisePropertyChanged("Datetime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Link {
            get {
                return this.LinkField;
            }
            set {
                if ((object.ReferenceEquals(this.LinkField, value) != true)) {
                    this.LinkField = value;
                    this.RaisePropertyChanged("Link");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Booking", Namespace="http://schemas.datacontract.org/2004/07/CameraSoapService")]
    [System.SerializableAttribute()]
    public partial class Booking : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetImages", ReplyAction="http://tempuri.org/IService1/GetImagesResponse")]
        cameraSoapService_UntitTest.ServiceReference1.Image[] GetImages();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetImages", ReplyAction="http://tempuri.org/IService1/GetImagesResponse")]
        System.Threading.Tasks.Task<cameraSoapService_UntitTest.ServiceReference1.Image[]> GetImagesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetImageById", ReplyAction="http://tempuri.org/IService1/GetImageByIdResponse")]
        cameraSoapService_UntitTest.ServiceReference1.Image GetImageById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetImageById", ReplyAction="http://tempuri.org/IService1/GetImageByIdResponse")]
        System.Threading.Tasks.Task<cameraSoapService_UntitTest.ServiceReference1.Image> GetImageByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetImageByDateTime", ReplyAction="http://tempuri.org/IService1/GetImageByDateTimeResponse")]
        cameraSoapService_UntitTest.ServiceReference1.Image GetImageByDateTime(System.DateTime dateToday);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetImageByDateTime", ReplyAction="http://tempuri.org/IService1/GetImageByDateTimeResponse")]
        System.Threading.Tasks.Task<cameraSoapService_UntitTest.ServiceReference1.Image> GetImageByDateTimeAsync(System.DateTime dateToday);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLatestImage", ReplyAction="http://tempuri.org/IService1/GetLatestImageResponse")]
        string GetLatestImage();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLatestImage", ReplyAction="http://tempuri.org/IService1/GetLatestImageResponse")]
        System.Threading.Tasks.Task<string> GetLatestImageAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetBookings", ReplyAction="http://tempuri.org/IService1/GetBookingsResponse")]
        cameraSoapService_UntitTest.ServiceReference1.Booking[] GetBookings();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetBookings", ReplyAction="http://tempuri.org/IService1/GetBookingsResponse")]
        System.Threading.Tasks.Task<cameraSoapService_UntitTest.ServiceReference1.Booking[]> GetBookingsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteBooking", ReplyAction="http://tempuri.org/IService1/DeleteBookingResponse")]
        int DeleteBooking(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteBooking", ReplyAction="http://tempuri.org/IService1/DeleteBookingResponse")]
        System.Threading.Tasks.Task<int> DeleteBookingAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveBooking", ReplyAction="http://tempuri.org/IService1/SaveBookingResponse")]
        int SaveBooking(string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveBooking", ReplyAction="http://tempuri.org/IService1/SaveBookingResponse")]
        System.Threading.Tasks.Task<int> SaveBookingAsync(string description);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : cameraSoapService_UntitTest.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<cameraSoapService_UntitTest.ServiceReference1.IService1>, cameraSoapService_UntitTest.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public cameraSoapService_UntitTest.ServiceReference1.Image[] GetImages() {
            return base.Channel.GetImages();
        }
        
        public System.Threading.Tasks.Task<cameraSoapService_UntitTest.ServiceReference1.Image[]> GetImagesAsync() {
            return base.Channel.GetImagesAsync();
        }
        
        public cameraSoapService_UntitTest.ServiceReference1.Image GetImageById(int id) {
            return base.Channel.GetImageById(id);
        }
        
        public System.Threading.Tasks.Task<cameraSoapService_UntitTest.ServiceReference1.Image> GetImageByIdAsync(int id) {
            return base.Channel.GetImageByIdAsync(id);
        }
        
        public cameraSoapService_UntitTest.ServiceReference1.Image GetImageByDateTime(System.DateTime dateToday) {
            return base.Channel.GetImageByDateTime(dateToday);
        }
        
        public System.Threading.Tasks.Task<cameraSoapService_UntitTest.ServiceReference1.Image> GetImageByDateTimeAsync(System.DateTime dateToday) {
            return base.Channel.GetImageByDateTimeAsync(dateToday);
        }
        
        public string GetLatestImage() {
            return base.Channel.GetLatestImage();
        }
        
        public System.Threading.Tasks.Task<string> GetLatestImageAsync() {
            return base.Channel.GetLatestImageAsync();
        }
        
        public cameraSoapService_UntitTest.ServiceReference1.Booking[] GetBookings() {
            return base.Channel.GetBookings();
        }
        
        public System.Threading.Tasks.Task<cameraSoapService_UntitTest.ServiceReference1.Booking[]> GetBookingsAsync() {
            return base.Channel.GetBookingsAsync();
        }
        
        public int DeleteBooking(int id) {
            return base.Channel.DeleteBooking(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteBookingAsync(int id) {
            return base.Channel.DeleteBookingAsync(id);
        }
        
        public int SaveBooking(string description) {
            return base.Channel.SaveBooking(description);
        }
        
        public System.Threading.Tasks.Task<int> SaveBookingAsync(string description) {
            return base.Channel.SaveBookingAsync(description);
        }
    }
}
